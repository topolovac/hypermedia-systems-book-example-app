package templates

type NewContactForm struct {
	Email string `form:"email"`
	First string `form:"first_name"`
	Last  string `form:"last_name"`
	Phone string `form:"phone"`
}

type FormErrors struct {
	Email   string
	First   string
	Last    string
	Phone   string
	Generic string
}

func (fe *FormErrors) HasErrors() bool {
	return fe.First != "" || fe.Last != "" || fe.Phone != "" || fe.Email != "" || fe.Generic != ""
}

templ NewContactView(contact *NewContactForm, errors FormErrors) {
	@Layout() {
		<form action="/contacts/new" method="post">
			<fieldset>
				<legend>Contact Values</legend>
				<h5 class="error">{ errors.Generic }</h5>
				<p>
					<label for="email">Email</label>
					<input name="email" id="email" type="text" placeholder="Email" value={ contact.Email }/>
					<span class="error">{ errors.Email }</span>
				</p>
				<p>
					<label for="first_name">First Name</label>
					<input name="first_name" id="first_name" type="text" placeholder="First Name" value={ contact.First }/>
					<span class="error">{ errors.First }</span>
				</p>
				<p>
					<label for="last_name">Last Name</label>
					<input name="last_name" id="last_name" type="text" placeholder="Last Name" value={ contact.Last }/>
					<span class="error">{ errors.Last }</span>
				</p>
				<p>
					<label for="phone">Phone</label>
					<input name="phone" id="phone" type="number" placeholder="Phone" value={ contact.Phone }/>
					<span class="error">{ errors.Phone }</span>
				</p>
				<button>Save</button>
			</fieldset>
		</form>
		<p>
			<a href="/contacts">Back</a>
		</p>
	}
}
